
===============================================================================
                                                                *tooltip.nvim*

This plugin will output in a floating window any stdout or stderr of the current file when it is
ran. See examples below:

                                                             *tooltip.setup()*
tooltip.setup({config})

  This is the initial function where the command to be executed for each file extension will be defined.

  Parameters: ~
  - {config}  Map defining the config for tooltips. Keys:
              - patterns: (Map) with the file extension as the key and the
                command to be ran as the value.
                  Note: the value representing the command will be formated 
                  following regular c printf rules, replacing the %s with the filepath to be
                  ran. 
                  - any file pattern set up here will override default's (look
                    at |default_file_patterns|)
              - styled: (Boolean) that will set the window border `rounded` and title
                `output` >

    Example.
    
    tooltip.setup({
      styled = true,
      patterns = {
        [".js"] = "node %s",
        [".rb"] = "ruby %s",
      },
    })
<

                                                              *tooltip.show()*
tooltip.show()
  
  Will get the current file in the buffer of the current window get the
  command to execute it (if set up with |tooltip.setup()|), run the command
  and output to stdout/stderr to a buffer and then show that buffer at the pos
  the cursor is at.

  Return: ~
  
  - If a command is not set up for the current file pattern, an error will
    show up saying so. Otherwise it will return nil.

                                                             *tooltip.close()*
tooltip.close() 

  Will close the window and delete the buffer that was used to show the output
  of the program. 

  Note: `q` is automatically added as a keymap to the buffer to call
  this function.

                                                       *default_file_patterns*
default_file_patterns

This plugin comes with default mappings so there is as little set up as possible. If you do find your self needing to override the command that gets executed with each file pattern then you can set your custom command, shown in |tooltip.setup()|

| File pattern | Command          |
| ------------ | ---------------- |
| '.js'        | 'node %s'        |
| '.rb'        | 'ruby %s'        |
| '.go'        | 'go run %s'      |
| '.erl'       | 'escript %s'     |
| '.scala'     | 'scala %s'       |
| '.clj'       | 'clojure -M %s'  |
| '.lua'       | 'lua %s'         |
| '.groovy'    | 'groovy %s'      |

===============================================================================
USER COMMAND

  *:TooltipPatterns*                      show all of the currently set up file 
                                        patterns set up

  *:TooltipTempAddPattern* <command>      will temporarily (until the current
                                        neovim insatnce is closed) add an 
                                        assosiation between the command and the
                                        current file extention that is open

vim:tw=78:ts=8:ft=help:norl:
